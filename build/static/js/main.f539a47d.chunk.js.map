{"version":3,"sources":["components/listing.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ListingComponent","props","renderContent","ResultData","state","result","length","Fragment","className","map","items","data","mission_id","MissionIds","src","links","mission_patch_small","alt","mission_name","target","href","article_link","flight_number","launch_year","launch_success","filterData","filtertype","FilterUrl","setState","successFilter","landingFilter","year","loading","axios","get","then","response","bind","this","data-testid","onClick","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f539a47d.chunk.js","sourcesContent":["import axios from 'axios';\r\nimport React from 'react';\r\n\r\ntype ResultState = {\r\n    result: any,\r\n    year: string,\r\n    successFilter:boolean,\r\n    landingFilter:boolean,\r\n    loading: boolean\r\n}\r\n\r\nclass ListingComponent extends React.Component<{}, ResultState> {\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            result: [],\r\n            year: '',\r\n            successFilter:true,\r\n            landingFilter: true,\r\n            loading: false\r\n        };\r\n        this.filterData = this.filterData.bind(this);\r\n    }\r\n    componentDidMount() {\r\n        this.setState({ loading: true }, () => {\r\n            axios.get('https://api.spacexdata.com/v3/launches?limit=100')\r\n                .then(response => this.setState({\r\n                    loading: false,\r\n                    result: [...response.data],\r\n                }));\r\n        });\r\n    }\r\n    renderContent = () => {\r\n        const ResultData: any = this.state.result;\r\n        if (ResultData.length === 0 ) {\r\n            return (\r\n                <React.Fragment>\r\n                    <div className=\"row\">\r\n                        <div>\r\n                            <h2>There is No Data found with applied filters.</h2>\r\n                        </div>\r\n                    </div>\r\n                </React.Fragment>\r\n            )\r\n        }\r\n        const launchData = ResultData.map((items: any) => {\r\n            const data = \r\n                    <ul>\r\n                        {\r\n                            items.mission_id.map((MissionIds:any) => {\r\n                                return <li>{MissionIds ? MissionIds: 'N/A'}</li>\r\n                            })\r\n                        }\r\n                    </ul>\r\n            return (\r\n                <React.Fragment>\r\n                    <div className=\"col-md-3 col-sm-6 child-section\">\r\n                        <div className=\"inner-section\">\r\n                            <img className=\"mission-image\" src={items.links.mission_patch_small} alt={items.mission_name} />\r\n                            <a className=\"title-name\" target=\"_blank\" href={items.links.article_link}>{items.mission_name + '  #' + items.flight_number} </a>\r\n                            <span className=\"missionIds\"><strong>Mission Ids:</strong>{data}</span>\r\n                            <span><strong>Launch Year:</strong>{items.launch_year}</span>\r\n                            <span><strong>Successful Launch:</strong>{items.launch_success?'true':'false'}</span>\r\n                        </div>\r\n                    </div>\r\n                </React.Fragment>\r\n            )\r\n        })\r\n        return launchData;\r\n    }\r\n    filterData = (filtertype:string) => {\r\n        let FilterUrl = 'https://api.spacexdata.com/v3/launches?limit=100'; \r\n        if (filtertype ==='successtrue') {\r\n            this.setState({ successFilter: true });\r\n            FilterUrl = FilterUrl + `&launch_sucess=${this.state.successFilter}&land_success=${this.state.landingFilter}&launch_year=${this.state.year}`;\r\n        }\r\n        else if (filtertype === 'successfalse') {\r\n            this.setState({ successFilter: false });\r\n            FilterUrl = FilterUrl + `&launch_sucess=${this.state.successFilter}&land_success=${this.state.landingFilter}&launch_year=${this.state.year}`;\r\n        }\r\n        else if (filtertype === 'landingtrue'){\r\n            this.setState({ landingFilter: true });\r\n            FilterUrl = FilterUrl + `&launch_sucess=${this.state.successFilter}&land_success=${this.state.landingFilter}&launch_year=${this.state.year}`;\r\n        }\r\n        else if (filtertype === 'landingfalse'){\r\n            this.setState({ landingFilter: false });\r\n            FilterUrl = FilterUrl + `&launch_sucess=${this.state.successFilter}&land_success=${this.state.landingFilter}&launch_year=${this.state.year}`;\r\n        }\r\n        else if(filtertype === 'reset') {\r\n            this.setState({ year: '', landingFilter: true, successFilter:true});\r\n            FilterUrl = FilterUrl;\r\n        }\r\n        else {\r\n            this.setState({ year: filtertype });\r\n            FilterUrl = FilterUrl + `&launch_sucess=${this.state.successFilter}&land_success=${this.state.landingFilter}&launch_year=${filtertype}`;\r\n        }\r\n        this.setState({ loading: true }, () => {\r\n            axios.get(FilterUrl)\r\n                .then(response => this.setState({\r\n                    loading: false,\r\n                    result: [...response.data],\r\n                }));\r\n        });\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"demo\">\r\n\r\n                <div className='view-container'>\r\n                    <div className='container side-bar-section'>\r\n                        <h4>Spacex Launch Programs</h4>\r\n                        <div className='col-md-2 col-sm-12 col-xs-12 filters-section'>\r\n                            <div>\r\n                                <p className=\"sidebar-filters\"><strong>Filters</strong><p data-testid=\"reset\" onClick={() => this.filterData('reset')}>Reset</p></p>\r\n                                <p className=\"launch-year\">Launch Year</p>\r\n                                <ul className=\"launch-buttons\">\r\n                                    <li className={this.state.year === '2006' ? 'active' : ''} data-testid=\"launch-year-2006\" onClick={() => this.filterData('2006')}>2006</li>\r\n                                    <li className={this.state.year === '2007' ? 'active' : ''} data-testid=\"launch-year-2007\" onClick={() => this.filterData('2007')}>2007</li>\r\n                                    <li className={this.state.year === '2008' ? 'active' : ''} data-testid=\"launch-year-2008\" onClick={() => this.filterData('2008')}>2008</li>\r\n                                    <li className={this.state.year === '2009' ? 'active' : ''} data-testid=\"launch-year-2009\" onClick={() => this.filterData('2009')}>2009</li>\r\n                                    <li className={this.state.year === '2010' ? 'active' : ''} data-testid=\"launch-year-2010\" onClick={() => this.filterData('2010')}>2010</li>\r\n                                    <li className={this.state.year === '2011' ? 'active' : ''} data-testid=\"launch-year-2011\" onClick={() => this.filterData('2011')}>2011</li>\r\n                                    <li className={this.state.year === '2012' ? 'active' : ''} data-testid=\"launch-year-2012\" onClick={() => this.filterData('2012')}>2012</li>\r\n                                    <li className={this.state.year === '2013' ? 'active' : ''} data-testid=\"launch-year-2013\" onClick={() => this.filterData('2013')}>2013</li>\r\n                                    <li className={this.state.year === '2014' ? 'active' : ''} data-testid=\"launch-year-2014\" onClick={() => this.filterData('2014')}>2014</li>\r\n                                    <li className={this.state.year === '2015' ? 'active' : ''} data-testid=\"launch-year-2015\" onClick={() => this.filterData('2015')}>2015</li>\r\n                                    <li className={this.state.year === '2016' ? 'active' : ''} data-testid=\"launch-year-2016\" onClick={() => this.filterData('2016')}>2016</li>\r\n                                    <li className={this.state.year === '2017' ? 'active' : ''} data-testid=\"launch-year-2017\" onClick={() => this.filterData('2017')}>2017</li>\r\n                                    <li className={this.state.year === '2018' ? 'active' : ''} data-testid=\"launch-year-2018\" onClick={() => this.filterData('2018')}>2018</li>\r\n                                    <li className={this.state.year === '2019' ? 'active' : ''} data-testid=\"launch-year-2019\" onClick={() => this.filterData('2019')}>2019</li>\r\n                                    <li className={this.state.year === '2020' ? 'active' : ''} data-testid=\"launch-year-2020\" onClick={() => this.filterData('2020')}>2020</li>\r\n                                </ul>\r\n                                <p className=\"launch-year\">Successful Launch</p>\r\n                                <ul className=\"launch-buttons\">\r\n                                    <li className={this.state.successFilter ? 'active' : ''} data-testid=\"success-true\" onClick={() => this.filterData('successtrue')}>True</li>\r\n                                    <li className={this.state.successFilter ? '' : 'active'} data-testid=\"success-false\" onClick={() => this.filterData('successfalse')}>False</li>\r\n                                </ul>\r\n                                <p className=\"launch-year\">Successful Landing</p>\r\n                                <ul className=\"launch-buttons\">\r\n                                    <li className={this.state.landingFilter ? 'active' : ''} data-testid=\"landing-true\" onClick={() => this.filterData('landingtrue')}>True</li>\r\n                                    <li className={this.state.landingFilter ? '' : 'active'} data-testid=\"landing-false\" onClick={() => this.filterData('landingfalse')}>False</li>\r\n                                </ul>\r\n                            </div>\r\n                        </div>\r\n                        <div className='col-md-10 col-sm-12 col-xs-12 paddingRight'>\r\n                            {this.state.loading ? <div className=\"loader\"></div>: this.renderContent() }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default ListingComponent;","import React from 'react';\r\nimport ListingComponent from './components/listing'\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header>\r\n        <h2>Spacex Launch Details</h2>\r\n      </header>\r\n      <ListingComponent />\r\n      <footer><span><strong>Developed by:</strong>Ramu Nagisetty</span></footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}